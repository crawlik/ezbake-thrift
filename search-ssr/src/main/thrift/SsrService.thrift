/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

namespace * ezbake.services.search

include "EzBakeBase.thrift"
include "EzElastic.thrift"

const string SERVICE_NAME = "ssrService";

union RawValue {
    1: optional string stringValue;
    2: optional i32 intValue;
    3: optional double doubleValue;
}

struct FacetValue {
    1: optional string label;
    2: optional RawValue value;
    3: optional string count;
}

struct FacetCategory {
    1: optional string field;
    2: optional list<FacetValue> facetValues;
}

struct SSRSearchResult {
    1: optional list<EzBakeBase.SSR> matchingRecords;
    2: optional i64 totalHits;
    3: optional i32 offset;
    4: optional i16 pageSize;
    5: optional map<string, FacetCategory> facets;

    /*
     * Maps from doc id => highlight result
     */
    6: optional map<string, EzElastic.HighlightResult> highlights;
}

struct PercolatorHit {
    1: required string percolatorId;
    2: required string documentId;
    3: required EzBakeBase.DateTime timeOfIngest;
    4: optional string documentTitle;
    5: optional EzBakeBase.DateTime documentResultDate;
}

struct PercolatorHitInbox{
    1: required list<PercolatorHit> listOfHits;
    2: required EzBakeBase.DateTime lastFlushed;
}

struct PercolatorInboxPeek{
    1: required i32 countOfHits;
    2: required EzBakeBase.DateTime lastFlushed;
    3: required string searchText;
    4: required string name;
}

service ssrService extends EzBakeBase.EzBakeBasePurgeService {
    /**
     * This method inserts the supplied SSR documents along with their provided JSON documents into the EzElastic
     * dataset. Each document that is inserted is indexed by the geo coordinates provided in the SSR object, the date in
     * the SSR, and all free text in the JSON portion of the entry. A dynamic mapping is being used for this index, so
     * each new JSON document will generate a new type in Elasticsearch, and each field will be indexed appropriately.
     *
     * @param ssrJsonMap A map of SSR objects to their JSON counterparts. The JSON object should be representative of
     *                   the document that the SSR describes. For example, if creating an SSR for a wikipedia article,
     *                   the SSR would contain the date that the article was published as the result date, as well as
     *                   the article title, etc. The JSON portion of that entry would be any extracted free text from
     *                   the HTML article. In other more structured cases, the JSON document should preserve the
     *                   structure of the incoming document to improve searchability.
     * @param userToken An EzSecurityToken generated by the client for this insert request.
     */
    list<EzElastic.IndexResponse> putWithDocs(
        1: map<EzBakeBase.SSR, string> ssrJsonMap, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * This is a targeted query that returns a list of SSRs that match the provided query parameters. This query will
     * ONLY return the SSR field of incoming documents. Several SSR specific facets are set with this search including
     * date and geo facets. This query also performs an Elasticsearch highlight query and places the highlight results
     * in the returned Thrift structure. The highlight results may contain data from fields that aren't returned with
     * the SSR object.
     *
     * @param query The query being used to retrieve SSR objects. NOTE: Returned fields will be replaced with the SSR
     *              field, as this method will be returning SSRs.
     * @param userToken An EzSecurityToken generated by the client for this search request.
     */
    SSRSearchResult searchSSR(1: EzElastic.Query query, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * This is a free-form query that returns a SearchResult directly from the EzElastic dataset that backs the SSR
     * Service. When using this query, assume that all fields from the incoming JSON document (the JSON portion of the
     * SSRJSON object) are available as fields to query. This method is essentially a pass-through to the EzElastic
     * dataset.
     *
     * @param query The query object that will be forwarded to the EzElastic dataset.
     * @param userToken An EzSecurityToken generated by the client for this search request.
     */
    EzElastic.SearchResult search(1: EzElastic.Query query, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * This allows creation and updating of ElasticSearch percolate queries. The percolate query will be registered
     * under the user that is identified in the token.
     *
     * @param percolateQuery The percolate query object that will be created in the EzElastic dataset.
     * @param userToken An EzSecurityToken generated by the client for this put request.
     */
    EzElastic.IndexResponse putPercolateQuery(
        1:string name, 2: EzElastic.PercolateQuery percolateQuery, 3: EzBakeBase.EzSecurityToken userToken);

    /**
     * This allows access to ElasticSearch percolate queries via a query string.
     *
     * @param query The query to be sent to EzElastic
     * @param userToken An EzSecurityToken generated by the client for this search request.
     */
    EzElastic.SearchResult queryPercolators(1: EzElastic.Query query, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * This allows removal to ElasticSearch percolate queries via the passed id.
     *
     * @param id The id of the percolate query to be deleted
     * @param userToken An EzSecurityToken generated by the client for this delete request.
     */
    bool deletePercolateQuery(1: string id, 2: EzBakeBase.EzSecurityToken userToken);

    /**
    * This allows to update the name of a percolate inbox.
    *
    * @param name The new name of the percolate inbox.
    * @param percolateId The percolate query id matching the inbox.
    * @param userToken An EzSecurityToken generated by the client for this request.
    **/
    EzElastic.IndexResponse updatePercolateInbox(
            1:string name, 2: string percolateId, 3: EzBakeBase.EzSecurityToken userToken);

    /**
     * Percolate the documents in the ssrJsonMap. Returns a list of all the percolate queries that match the passed
     * documents.
     *
     * @param ssrJsonMap A map of SSR objects to their JSON counterparts. The JSON object should be representative of
     *                   the document that the SSR describes. For example, if creating an SSR for a wikipedia article,
     *                   the SSR would contain the date that the article was published as the result date, as well as
     *                   the article title, etc. The JSON portion of that entry would be any extracted free text from
     *                   the HTML article. In other more structured cases, the JSON document should preserve the
     *                   structure of the incoming document to improve searchability.
     * @param userToken An EzSecurityToken generated by the client for this percolate request.
     */
    list<EzElastic.PercolateQuery> percolate(
        1: map<EzBakeBase.SSR, string> ssrJsonMap, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * Peek into the user's percolator query inbox. Returns a PercolatorInboxPeek object that gives the current number
     * of hits for the user's percolate query and the date for the last time the inbox was gotten and flushed.
     *
     * @param id The id of the percolate query to get the inbox of
     * @param userToken An EzSecurityToken generated by the client for this peek request.
     */
    PercolatorInboxPeek peekPercolatorInbox(1: string id, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * Get and flush the user's percolator query inbox. Returns a PercolatorHitInbox object that gives a list of all the
     * percolator hits for this query and the last time the inbox was accessed and flushed (prior to this request).
     *
     * @param id The id of the percolate query to get and flush the inbox of
     * @param userToken An EzSecurityToken generated by the client for this getAndFlush request.
     */
    PercolatorHitInbox getAndFlushPercolatorInbox(1: string id, 2: EzBakeBase.EzSecurityToken userToken);

    /**
     * Peek into the user's main percolator query inbox. Returns a map of PercolatorInboxPeek objects that gives the
     * current number of hits for the user's percolate query and the date for the last time each inbox was gotten and
     * flushed.
     *
     * @param userToken An EzSecurityToken generated by the client for this peek request.
     */
    map<string, PercolatorInboxPeek> peekMainPercolatorInbox(1: EzBakeBase.EzSecurityToken userToken);
}
